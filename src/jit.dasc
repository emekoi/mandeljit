||#if ((defined(_M_X64) || defined(__x86_64__) || defined(__amd64__)) != X64) || (defined(_WIN32) != WIN)
#error "Wrong DynASM flags used: pass `-D X64` and/or `-D WIN` to dynasm.lua as appropriate"
#endif

#include <stdio.h>
#include <stdlib.h>
#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"
#if _WIN32
  #include <Windows.h>
#else
  #include <sys/mman.h>
  #if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
    #define MAP_ANONYMOUS MAP_ANON
  #endif
#endif

#define UNUSED(x)  ((void) (x))
#define sqr(x) ((x) * (x))

static void* link_and_encode(dasm_State** d) {
  size_t sz; void* buf;
  dasm_link(d, &sz);
#ifdef _WIN32
  buf = VirtualAlloc(0, sz, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
#else
  buf = mmap(0, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
#endif
  dasm_encode(d, buf);
#ifdef _WIN32
  { DWORD dwOld; VirtualProtect(buf, sz, PAGE_EXECUTE_READ, &dwOld); }
#else
  mprotect(buf, sz, PROT_READ | PROT_EXEC);
#endif
  return buf;
}

typedef struct { double r; double i; } complex;

static void(*compile(char const *code))(complex *registers) {
  complex *src, *dst;
  dasm_State* d;

  |.if X64
    |.arch x64
  |.else
    |.arch x86
  |.endif

  |.section code
  dasm_init(&d, DASM_MAXSECTION);

  |.globals lbl_
  void* labels[lbl__MAX];
  dasm_setupglobal(&d, labels, lbl__MAX);

  |.actionlist actions
  dasm_setup(&d, actions);

  |.if X64
    |.define aReg, r12

    |.if WIN
      |.define aSrc, rsi
      |.define aDst, rdi
    |.else
      |.define aSrc, r13
      |.define aDst, r14
    |.endif

    |.macro prologue
      | push aReg
      | push aSrc
      | push aDst
      | push rax
    |.endmacro

    |.macro epilogue
      | pop rax
      | pop aDst
      | pop aSrc
      | pop aReg
      | ret
    |.endmacro

  |.else

    |.define aReg, ebp
    |.define aSrc, esi
    |.define aDst, edi

    |.macro prologue
      | push aReg
      | push aSrc
      | push aDst
    |.endmacro

    |.macro epilogue
      | pop aDst
      | pop aSrc
      | pop aReg
      | ret 4
    |.endmacro
  |.endif

  |.type src, complex, aSrc
  |.type dst, complex, aDst
  |.type registers, complex, aReg

  dasm_State** Dst = &d;

  |.code
  |->main:
  | mov aReg, registers
  | prologue

  for(; *code; code += 3) {
    switch(*code) {
      | mov aDst, &aReg[code[2] - 'a']
      | mov aSrc, &registers[code[1] - 'a']
      case '=': {
        | mov aDst, aSrc
        break;
      } case '+': {
        | mov r1, [ dst->r + src->r ]
        | mov r2, [ dst->i + src->i ]
        | mov dst->r, r1
        | mov dst->i, r2
        break;
      } case '*': {
        | mov r1, [ dst->r * src->r - dst->i * src->i ]
        | mov r2, [ dst->r * src->i + dst->i * src->r ]
        | mov dst->r, r1
        | mov dst->i, r2
        break;
      } case 0: {
        | epilogue
        link_and_encode(&d);
        dasm_free(&d);
        return (void(*)(complex*))labels[lbl_main];
      }
    }
  }
  return NULL;
}

static void run(complex *registers, const char* code) {
  compile(code)(registers);
}

int main(int argc, char** argv) {
  complex registers[4];
  int i, x, y;
  char line[1600];
  printf("P5\n%d %d\n%d\n", 1600, 900, 255);
  for (y = 0; y < 900; ++y) {
    for (x = 0; x < 1600; ++x) {
      registers[0].r = 2 * 1.6 * (x / 1600.0 - 0.5);
      registers[0].i = 2 * 0.9 * (y /  900.0 - 0.5);
      for (i = 1; i < 4; ++i) registers[i].r = registers[i].i = 0;
      for (i = 0; i < 256 && sqr(registers[1].r) + sqr(registers[1].i) < 4; ++i)
        run(registers, argv[1]);
      line[x] = i;
    }
    fwrite(line, 1, sizeof(line), stdout);
  }
  return 0;
}
